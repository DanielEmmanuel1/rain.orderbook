type Vault @entity {
  id: Bytes!
  "The token that this vault is for"
  token: Bytes!
  "The owner of this vault"
  owner: Bytes!
  "The vaultId of this vault"
  vaultId: BigInt!
  "Orders this vault is an input for"
  ordersAsInput: [Order!]! @derivedFrom(field: "inputs")
  "Orders this vault is an output for"
  ordersAsOuput: [Order!]! @derivedFrom(field: "outputs")
  "The amount of the token that is in this vault"
  balance: BigInt!
  "All balance changes for this vault"
  balanceChanges: [VaultBalanceChange!]! @derivedFrom(field: "vault")
}

interface VaultBalanceChange {
  "The vault that was affected"
  vault: Vault!
  "The amount that was changed - this is unsigned"
  amount: BigInt!
  "The balance of the vault before the change"
  oldVaultBalance: BigInt!
  "The balance of the vault after the change"
  newVaultBalance: BigInt!
}

type Deposit implements Event & VaultBalanceChange @entity(immutable: true) {
  id: Bytes!
  "The token that was deposited"
  token: Bytes!

  # For VaultBalanceChange
  "The vault that was deposited into"
  vault: Vault!
  "The amount that was deposited"
  amount: BigInt!
  oldVaultBalance: BigInt!
  newVaultBalance: BigInt!

  # For Event
  transaction: Transaction!
  "The msg.sender of this withdrawal"
  sender: Bytes!
}

type Withdrawal implements Event & VaultBalanceChange @entity(immutable: true) {
  id: Bytes!
  "The token that was withdrawn"
  token: Bytes!
  "The amount that was being targeted to be withdrawn"
  targetAmount: BigInt!

  # For VaultBalanceChange
  "The vault that was withdrawn from"
  vault: Vault!
  "The amount that was actually withdrawn"
  amount: BigInt!
  oldVaultBalance: BigInt!
  newVaultBalance: BigInt!

  # For Event
  transaction: Transaction!
  "The msg.sender of this withdrawal"
  sender: Bytes!
}

type TradeVaultBalanceChange implements VaultBalanceChange @entity(immutable: true) {
  id: Bytes!
  "The trade that this balance change is for"
  trade: Trade!
  "The vault that was affected"
  vault: Vault!
  "The amount that was changed - this is unsigned"
  amount: BigInt!
  "The balance of the vault before the change"
  oldVaultBalance: BigInt!
  "The balance of the vault after the change"
  newVaultBalance: BigInt!
}

type Order @entity {
  id: Bytes!
  "Whether this order is active or not"
  active: Boolean!
  "The hash of the order"
  orderHash: Bytes!
  "The owner of the order"
  owner: Bytes!
  "The vaults that are inputs to this order"
  inputs: [Vault!]!
  "The vaults that are outputs to this order"
  outputs: [Vault!]!
  "A nonce for this order"
  nonce: Bytes!
  "The ABI encoded bytes for the Order struct"
  orderBytes: Bytes!
  "AddOrder events for this order"
  addEvents: [AddOrder!]! @derivedFrom(field: "order")
  "RemoveOrder events for this order"
  removeEvents: [RemoveOrder!]! @derivedFrom(field: "order")
  "Trades for this order"
  trades: [Trade!]! @derivedFrom(field: "order")
}

type AddOrder implements Event @entity(immutable: true) {
  id: Bytes!
  "The order that was added"
  order: Order!

  # For Event
  transaction: Transaction!
  "The msg.sender of this add order call"
  sender: Bytes!
}

type RemoveOrder implements Event @entity(immutable: true) {
  id: Bytes!
  "The order that was removed"
  order: Order!

  # For Event
  transaction: Transaction!
  "The msg.sender of this remove order call"
  sender: Bytes!
}

type Trade @entity(immutable: true) {
  id: Bytes!
  "The order that was traded"
  order: Order!
  "Input vault balance change"
  inputVaultBalanceChange: TradeVaultBalanceChange!
  "Output vault balance change"
  outputVaultBalanceChange: TradeVaultBalanceChange!
  "The event in which this trade occured"
  tradeEvent: TradeEvent!
}

type TakeOrder implements TradeEvent @entity(immutable: true) {
  id: Bytes!

  "The input amount from the perspective of the taker"
  inputAmount: BigInt!
  "The output amount from the perspective of the taker"
  outputAmount: BigInt!
  "The ABI encoded bytes for the TakeOrderConfig struct"
  takeOrderConfigBytes: Bytes!

  # For TradeEvent
  "The trades that occured in this event"
  trades: [Trade!]! @derivedFrom(field: "tradeEvent")
  transaction: Transaction!
  "The msg.sender of this trade"
  sender: Bytes!
}

interface TradeEvent implements Event {
  id: Bytes!
  "The trades that occured in this event"
  trades: [Trade!]! @derivedFrom(field: "tradeEvent")

  # For Event
  transaction: Transaction!
  "The msg.sender of this trade"
  sender: Bytes!
}

type Transaction @entity(immutable: true) {
  id: Bytes!
  timestamp: BigInt!
  blockNumber: BigInt!
  from: Bytes!
  events: [Event!] @derivedFrom(field: "transaction")
}

interface Event {
  "Transaction this event was emitted in"
  transaction: Transaction!
  "msg.sender for the event"
  sender: Bytes!
}