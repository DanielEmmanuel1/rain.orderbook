import {
  test,
  clearStore,
  describe,
  afterEach,
  clearInBlockStore,
  assert,
} from "matchstick-as";
import { Bytes, BigInt, Address } from "@graphprotocol/graph-ts";
import { Evaluable, IO, createAddOrderEvent } from "../event-mocks.test";
import { handleAddOrder } from "../../src/order";

describe("Add and remove orders", () => {
  afterEach(() => {
    clearStore();
    clearInBlockStore();
  });

  test("handleAddOrder()", () => {
    let event = createAddOrderEvent(
      Address.fromString("0x1234567890123456789012345678901234567890"),
      Address.fromString("0x0987654321098765432109876543210987654321"),
      [
        new IO(
          Address.fromString("0x1234567890123456789012345678901234567890"),
          BigInt.fromI32(18),
          BigInt.fromI32(1)
        ),
      ],
      [
        new IO(
          Address.fromString("0x1234567890123456789012345678901234567890"),
          BigInt.fromI32(18),
          BigInt.fromI32(1)
        ),
      ],
      Bytes.fromHexString("0x1234567890123456789012345678901234567890"),
      new Evaluable(
        Address.fromString("0x1234567890123456789012345678901234567890"),
        Address.fromString("0x0987654321098765432109876543210987654321"),
        Bytes.fromHexString("0x1234567890123456789012345678901234567890")
      )
    );

    handleAddOrder(event);

    assert.entityCount("Order", 1);
    assert.fieldEquals(
      "Order",
      "0x0987654321098765432109876543210987654321",
      "active",
      "true"
    );
    assert.fieldEquals(
      "Order",
      "0x0987654321098765432109876543210987654321",
      "orderHash",
      "0x0987654321098765432109876543210987654321"
    );
    assert.fieldEquals(
      "Order",
      "0x0987654321098765432109876543210987654321",
      "owner",
      "0x1234567890123456789012345678901234567890"
    );
    assert.fieldEquals(
      "Order",
      "0x0987654321098765432109876543210987654321",
      "nonce",
      "0x1234567890123456789012345678901234567890"
    );
    assert.fieldEquals(
      "Order",
      "0x0987654321098765432109876543210987654321",
      "orderBytes",
      "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000123456789012345678901234567890123456789000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001c
    );
  });
});
