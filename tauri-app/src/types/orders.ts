/*
 Generated by typeshare 1.7.0
*/

export type BigIntString = string;

export type BytesString = string;

export interface Account {
	id: BytesString;
}

export interface Transaction {
	id: string;
}

export interface Erc20 {
	id: string;
	symbol: string;
	decimals: number;
}

export interface TokenVault {
	balance: BigIntString;
}

export interface Vault {
	id: string;
}

export interface Io {
	token: Erc20;
	token_vault: TokenVault;
	vault: Vault;
}

export interface Order {
	id: string;
	timestamp: BigIntString;
	handle_io: boolean;
	order_jsonstring: string;
	owner: Account;
	order_active: boolean;
	expression: BytesString;
	interpreter: BytesString;
	interpreter_store: BytesString;
	transaction: Transaction;
	valid_inputs?: Io[];
	valid_outputs?: Io[];
}

export interface OrdersQuery {
	orders: Order[];
}

export enum OrderDirection {
	Asc = "Asc",
	Desc = "Desc",
}

export enum OrderOrderBy {
	Id = "Id",
	OrderHash = "OrderHash",
	Owner = "Owner",
	OwnerId = "OwnerId",
	Interpreter = "Interpreter",
	InterpreterStore = "InterpreterStore",
	ExpressionDeployer = "ExpressionDeployer",
	Expression = "Expression",
	OrderActive = "OrderActive",
	HandleIo = "HandleIo",
	Meta = "Meta",
	MetaId = "MetaId",
	MetaMetaBytes = "MetaMetaBytes",
	ValidInputs = "ValidInputs",
	ValidOutputs = "ValidOutputs",
	OrderJsonstring = "OrderJsonstring",
	ExpressionJsonstring = "ExpressionJsonstring",
	Transaction = "Transaction",
	TransactionId = "TransactionId",
	TransactionTimestamp = "TransactionTimestamp",
	TransactionBlockNumber = "TransactionBlockNumber",
	Emitter = "Emitter",
	EmitterId = "EmitterId",
	Timestamp = "Timestamp",
	TakeOrders = "TakeOrders",
	OrdersClears = "OrdersClears",
}

